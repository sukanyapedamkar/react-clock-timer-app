{"version":3,"sources":["Clock.js","App.js","serviceWorker.js","index.js"],"names":["Clock","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","days","hours","minutes","seconds","getTimeUntil","deadline","_this2","setInterval","time","Date","parse","Math","floor","setState","num","react_default","a","createElement","className","startwithzero","Component","App","newDeadline","src_Clock","placeholder","onChange","event","target","value","onClick","changeDeadline","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAoDeA,oBA/Cd,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACZC,KAAK,EACLC,MAAM,EACNC,QAAQ,EACRC,QAAQ,GANQX,oFAYjBG,KAAKS,aAAaT,KAAKJ,MAAMc,sDAGX,IAAAC,EAAAX,KAClBY,YAAY,kBAAMD,EAAKF,aAAaE,EAAKf,MAAMc,WAAU,0CAG7CA,GACZ,IAAMG,EAAOC,KAAKC,MAAML,GAAYI,KAAKC,MAAM,IAAID,MAC7CN,EAAUQ,KAAKC,MAAMJ,EAAK,KAAQ,GAClCN,EAAUS,KAAKC,MAAMJ,EAAK,IAAK,IAAM,GACrCP,EAAQU,KAAKC,MAAMJ,EAAI,KAAgB,IACvCR,EAAOW,KAAKC,MAAMJ,EAAI,OAC5Bb,KAAKkB,SAAS,CAACb,OAAMC,QAAOC,UAASC,kDAIxBW,GACb,OAAOA,EAAM,GAAK,IAAKA,EAAMA,mCAI7B,OACCC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAOH,EAAAC,EAAAC,cAAA,YAAOtB,KAAKwB,cAAcxB,KAAKI,MAAMC,OAA3D,SACAe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAQH,EAAAC,EAAAC,cAAA,YAAOtB,KAAKwB,cAAcxB,KAAKI,MAAME,QAA5D,UACMc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAUH,EAAAC,EAAAC,cAAA,YAAOtB,KAAKwB,cAAcxB,KAAKI,MAAMG,UAA9D,YACAa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAUH,EAAAC,EAAAC,cAAA,YAAOtB,KAAKwB,cAAcxB,KAAKI,MAAMI,UAA9D,oBAxCUiB,cCmCLC,cAjCZ,SAAAA,EAAY9B,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0B,IACjB7B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4B,GAAAvB,KAAAH,KAAMJ,KACDQ,MAAQ,CACZM,SAAU,mBACViB,YAAa,IAJG9B,gFASfG,KAAKkB,SAAS,CAACR,SAASV,KAAKI,MAAMuB,+CAG9B,IAAAhB,EAAAX,KACP,OACEoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,gBACevB,KAAKI,MAAMM,UAE1BU,EAAAC,EAAAC,cAACM,EAAD,CACElB,SAAUV,KAAKI,MAAMM,WAEvBU,EAAAC,EAAAC,cAAA,SACEO,YAAY,WACZC,SAAU,SAAAC,GAAK,OAAIpB,EAAKO,SAAS,CAACS,YAAaI,EAAMC,OAAOC,WAE9Db,EAAAC,EAAAC,cAAA,UAAQY,QAAS,kBAAMvB,EAAKwB,mBAA5B,kBA3BUV,aCQEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ef3fc40a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\nclass Clock extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdays:0,\n\t\t\thours:0,\n\t\t\tminutes:0,\n\t\t\tseconds:0\n\t\t}\n\t\t\n\t}\n\n\tcomponentWillMount(){\n\t\tthis.getTimeUntil(this.props.deadline);\n\t}\n\n\tcomponentDidMount(){\n\t\tsetInterval(() => this.getTimeUntil(this.props.deadline),1000);\n\t}\n\n\tgetTimeUntil(deadline){\n\t\tconst time = Date.parse(deadline) - Date.parse(new Date());\n\t\tconst seconds = Math.floor(time/1000) % 60; \n\t\tconst minutes = Math.floor(time/1000/60) % 60;\n\t\tconst hours = Math.floor(time/(1000*60*60) % 24);\n\t\tconst days = Math.floor(time/(1000*60*60*24));\n\t\tthis.setState({days, hours, minutes, seconds});\n\n\t}\n\n\tstartwithzero(num){\n\t\treturn num < 10 ? '0'+ num : num;\n\t}\n\trender(){\n\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<div className=\"days\"><span>{this.startwithzero(this.state.days)}</span> days</div>\n\t\t\t\t<div className=\"hours\"><span>{this.startwithzero(this.state.hours)}</span> hours</div>\n\t        \t<div className=\"minutes\"><span>{this.startwithzero(this.state.minutes)}</span> minutes</div>\n\t        \t<div className=\"seconds\"><span>{this.startwithzero(this.state.seconds)}</span> seconds</div>\n\n\t\t\t</div>\n\t\t)      \n\t      \n\t}\n}\n\nexport default Clock;","import React, { Component } from 'react';\nimport Clock from './Clock';\nimport './App.css';\n\nclass App extends Component {\n  \n  \tconstructor(props){\n  \t\tsuper(props);\n  \t\tthis.state = {\n  \t\t\tdeadline: 'December 25,2019',\n  \t\t\tnewDeadline: ''\n  \t\t}\n  \t}\n\n  \tchangeDeadline(){\n      this.setState({deadline:this.state.newDeadline})\n  \t}\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-title\">\n        \tCountdown to {this.state.deadline}\n        </div>\n        <Clock \n          deadline={this.state.deadline}\n        />\n        <input  \n          placeholder='new date' \n          onChange={event => this.setState({newDeadline: event.target.value})} \n        />\n        <button onClick={() => this.changeDeadline()}>\n        \tSubmit\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}